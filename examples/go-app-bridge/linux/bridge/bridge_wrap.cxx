/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: bridge/bridge.i



#define SWIG_VERSION 0x040300
#define SWIGGO
#define SWIGMODULE bridge
#define SWIGGO_PREFIX go.bridge
#define SWIG_DIRECTORS
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef ptrdiff_t intgo;
typedef size_t uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIGGO_GCCGO

#ifdef __cplusplus
extern "C" {
#endif
extern void *_cgo_allocate(size_t);
extern void _cgo_panic(const char *);
#ifdef __cplusplus
}
#endif

#define _swig_goallocate _cgo_allocate
#define _swig_gopanic _cgo_panic

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "bridge.h"


// C++ director class methods.
#include "bridge_wrap.h"

SwigDirector_Callback::SwigDirector_Callback(int swig_p)
    : Callback(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_Callback_bridge_4f8f469d86e6b224(intgo);
SwigDirector_Callback::~SwigDirector_Callback()
{
  Swiggo_DeleteDirector_Callback_bridge_4f8f469d86e6b224(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorCallback_callback_status_bridge_4f8f469d86e6b224(int, intgo arg2);
void SwigDirector_Callback::status(int status) {
  intgo swig_arg2;
  
  swig_arg2 = (int)status; 
  Swig_DirectorCallback_callback_status_bridge_4f8f469d86e6b224(go_val, swig_arg2);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_bridge_4f8f469d86e6b224(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_bridge_4f8f469d86e6b224(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


Callback *_wrap__swig_NewDirectorCallbackCallback_bridge_4f8f469d86e6b224(intgo _swig_go_0) {
  int arg1 ;
  Callback *result = 0 ;
  Callback *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_Callback(arg1);
  *(Callback **)&_swig_go_result = (Callback *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorCallback_bridge_4f8f469d86e6b224(Callback *_swig_go_0) {
  Callback *arg1 = (Callback *) 0 ;
  
  arg1 = *(Callback **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorCallback_upcall_Status_bridge_4f8f469d86e6b224(SwigDirector_Callback *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_Callback *arg1 = (SwigDirector_Callback *) 0 ;
  int arg2 ;
  
  arg1 = *(SwigDirector_Callback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg1->_swig_upcall_status(arg2);
  
}


void _wrap_delete_Callback_bridge_4f8f469d86e6b224(Callback *_swig_go_0) {
  Callback *arg1 = (Callback *) 0 ;
  
  arg1 = *(Callback **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Callback_status_bridge_4f8f469d86e6b224(Callback *_swig_go_0, intgo _swig_go_1) {
  Callback *arg1 = (Callback *) 0 ;
  int arg2 ;
  
  arg1 = *(Callback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  (arg1)->status(arg2);
  
}


Callback *_wrap_new_Callback_bridge_4f8f469d86e6b224() {
  Callback *result = 0 ;
  Callback *_swig_go_result;
  
  
  result = (Callback *)new Callback();
  *(Callback **)&_swig_go_result = (Callback *)result; 
  return _swig_go_result;
}


Bridge *_wrap_new_Bridge_bridge_4f8f469d86e6b224() {
  Bridge *result = 0 ;
  Bridge *_swig_go_result;
  
  
  result = (Bridge *)new Bridge();
  *(Bridge **)&_swig_go_result = (Bridge *)result; 
  return _swig_go_result;
}


void _wrap_delete_Bridge_bridge_4f8f469d86e6b224(Bridge *_swig_go_0) {
  Bridge *arg1 = (Bridge *) 0 ;
  
  arg1 = *(Bridge **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Bridge_delCallback_bridge_4f8f469d86e6b224(Bridge *_swig_go_0) {
  Bridge *arg1 = (Bridge *) 0 ;
  
  arg1 = *(Bridge **)&_swig_go_0; 
  
  (arg1)->delCallback();
  
}


void _wrap_Bridge_setCallback_bridge_4f8f469d86e6b224(Bridge *_swig_go_0, Callback *_swig_go_1) {
  Bridge *arg1 = (Bridge *) 0 ;
  Callback *arg2 = (Callback *) 0 ;
  
  arg1 = *(Bridge **)&_swig_go_0; 
  arg2 = *(Callback **)&_swig_go_1; 
  
  (arg1)->setCallback(arg2);
  
}


void _wrap_Bridge_status_bridge_4f8f469d86e6b224(Bridge *_swig_go_0, intgo _swig_go_1) {
  Bridge *arg1 = (Bridge *) 0 ;
  int arg2 ;
  
  arg1 = *(Bridge **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  (arg1)->status(arg2);
  
}


intgo _wrap_Bridge_start_bridge_4f8f469d86e6b224(Bridge *_swig_go_0, intgo _swig_go_1, _gostring_* _swig_go_2) {
  Bridge *arg1 = (Bridge *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bridge **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  
  result = (int)(arg1)->start(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

